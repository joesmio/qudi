# Config file for a simple simulation of the core functions: Confocal, counter,
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

    module_server:
        address: 'localhost'
        port: 12345


hardware:

    motor:
        module.Class: 'motor.nanomax_controller_SRS.NanomaxStage'
        com_port_nano_xyz: 'COM9'
        nano_xyz_baud_rate: 115200

    lasergem:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
        interface: 'ASRL1::INSTR'
        maxpower: 2
        psu: 'SMD12'

    coarse_motor:
        module.Class: 'motor.aptftdi_motor.MotorApt'
        axis_labels:
            - x
            - y
            - z
        x:
            hw_type: 'TDC001'
            serial_num: 26001815
            pitch: 1.8
            unit: 'm'
            constraints:
                pos_min: 0
                pos_max: 6e-3
                vel_min: 0.1e-3
                vel_max: 0.5e-3
                acc_min: 0.3e-3
                acc_max: 0.5e-3
        y:
            hw_type: 'TDC001'
            serial_num: 26001817
            pitch: 1.8
            unit: 'm'
            constraints:
                pos_min: 0
                pos_max: 6e-3
                vel_min: 0.1e-3
                vel_max: 0.5e-3
                acc_min: 0.3e-3
                acc_max: 0.5e-3
        z:
            hw_type: 'TDC001'
            serial_num: 26001403
            pitch: 1.8
            unit: 'm'
            constraints:
                pos_min: 0
                pos_max: 6e-3
                vel_min: 0.1e-3
                vel_max: 0.5e-3
                acc_min: 0.3e-3
                acc_max: 0.5e-3


    fastscanner:
        module.Class: 'fastscanner_bpc.FastScanner'
        counter_channel: 0
        clock_frequency: 100
        timetagger_channel_apd_0: 1
        averager: True
        #timetagger_channel_apd_1: 5
        #coincidence: [3] # addition of the two channels in list form
        coincidence_window: 2e-9


    mywaterloobox:
        module.Class: 'waterloo.later_waterloo_counter_coincidence.WaterlooCounter2'
        counter_channel: 1
        clock_frequency: 100
        timetagger_channel_apd_0: 1
        averager: True
        #timetagger_channel_apd_1: 5
        #coincidence: [3] # addition of the two channels in list form
        coincidence_window: 2e-9

    histo:
        module.Class: 'waterloo.waterloo_justhisto.WaterlooCounter2'
        counter_channel: 1
        clock_frequency: 100
        timetagger_channel_apd_0: 1
        averager: True
        #timetagger_channel_apd_1: 5
        #coincidence: [3] # addition of the two channels in list form
        coincidence_window: 2e-9

    odmrcounter:
        module.Class: 'waterlooodmrcounter.WaterlooODMRCounter'




    keithlejy:
        module.Class: 'keithley.Keithley'
        counter_channel: 1
        clock_frequency: 100
        timetagger_channel_apd_0: 1
        averager: True
        timetagger_channel_apd_1: 5
        coincidence: [3] # addition of the two channels in list form
        coincidence_window: 2e-9




    rotmot:
        module.Class: 'motor.aptmotor.APTStage'
        dll_path: 'C:\Users\it062978-admin\qudi\thirdparty\thorlabs\win64\APT.dll'
        axis_labels:
            - phi
        phi:
            hw_type: 'TDC001'
            serial_num: 27503007
            pitch: 17.87
            unit: 'degree'
            constraints:
                pos_min: -360
                pos_max: 720
                vel_min: 1.0
                vel_max: 10.0
                acc_min: 4.0
                acc_max: 10.0


    picoharpfast:
        module.Class: 'picoquant.picoharp300.PicoHarp300'
        deviceID: 0 # a device index from 0 to 7.
        mode: 0 # 0: histogram mode, 2: T2 mode, 3: T3 mode

    microwavesource:
        #module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        module.Class: 'microwave.mw_source_smbv.MicrowaveSmbv'
        gpib_address: 'USB0::0x0AAD::0x0054::175244::0::INSTR'
        gpib_timeout: 10
        scanmode: 'SWEEP'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False

    simpledatadummy:
        module.Class: 'simple_data_dummy.SimpleDummy'

    spincore:
        module.Class: 'spincore.pulse_blaster_esrpro.PulseBlasterESRPRO'
        clock_frequency: 500e6 # in Hz
        min_instr_len: 5    # number of clock cycles for minimal instruction
        debug_mode: True   # optional, to set the debug mode on or off.
        use_smart_pulse_creation: False # optinal, default is false, try to
                                            # optimize the memory used on the device.

    fastcounterwaterloo:
        module.Class: 'fast_counter_waterloo.FastCounterWaterloo'


    #dummy fastcounter, pulser, microwave
    mydummypulser:
        module.Class: 'pulser_dummy.PulserDummy'

    mydummyfastcounter:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        #choose_trace: True
        #gated: False
        #gated: False

    microwave_dummy:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'
        gpib_address: 'dummy'
        gpib_timeout: 20

    motordummy:
        module.Class: 'motor.motor_dummy.MotorDummy'


logic:

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        remoteaccess: True
        connect:
            laser: 'lasergem'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mywaterloobox'
            savelogic: 'save'

#    scanner:
#        module.Class: 'confocal_logic.ConfocalLogic'
#        connect:
#            confocalscanner1: 'confocal_scanner_motor_interfuse'
#            savelogic: 'save'

#    optimizer:
#        module.Class: 'optimizer_logic.OptimizerLogic'
#        connect:
#            confocalscanner1: 'fastscanner'
#            fitlogic: 'fit'

    scanner:
        module.Class: 'finder_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'fastscanner'
            savelogic: 'save'
            motor: coarse_motor #motordummy #steppermotor

    scanner2:
        module.Class: 'finder_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'fastscanner'
            savelogic: 'save'
            motor: motordummy #steppermotor



    optimizer:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'fastscanner'
            fitlogic: 'fit'

    tracking:
        module.Class: 'tracking_logic.TrackingLogic'
        connect:
            confocalscanner1: 'fastscanner'
            fitlogic: 'fit'
            simplecounter: 'mywaterloobox'

    g2logic:
        module.Class: 'g2_logic.g2Logic'
        connect:

            counter: 'histo'
            fitlogic: 'fit'

    saturationlogic:
        module.Class: 'saturation_logic.saturationLogic'
        connect:
            counter: 'mywaterloobox'
            fitlogic: 'fit'
            laserhardware: 'lasergem'


    polarisation:
        module.Class: 'polarisation_dep_logic.PolarisationDepLogic'
        connect:
            counterlogic: 'counterlogic'
            savelogic: 'save'
            motor: 'rotmot'



    automationlogic:
        module.Class: 'automation.AutomationLogic'
        connect:
            taskrunner: 'tasklogic'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scanner'
            optimizer1: 'optimizer'
            savelogic: 'save'

    fit:
        module.Class: 'fit_logic.FitLogic'

    magnet_motor_interfuse:
        module.Class: 'interfuse.magnet_motor_interfuse.MagnetMotorInterfuse'
        connect:
            motorstage: 'coarse_motor'

    confocal_scanner_motor_interfuse:
        module.Class: 'interfuse.confocal_scanner_motor_interfuse.ConfocalScannerMotorInterfuse'
        connect:
            magnetinterface: 'magnet_motor_interfuse'
            confocalscanner1: 'mywaterloobox'
            fitlogic: 'fit'

    save:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True

    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan']
                needsmodules:
                    optimizer: 'optimizer'

    simplelogic:
        module.Class: 'simple_zdata_logic.SimpleDataLogic'
        connect:
            scanner: 'scanner'
            fitlogic: 'fit'

    xsimplelogic:
        module.Class: 'simple_xdata_logic.SimpleDataLogic'
        connect:
            scanner: 'scanner'

    ysimplelogic:
        module.Class: 'simple_ydata_logic.SimpleDataLogic'
        connect:
            scanner: 'scanner'

    odmrlogic:
            module.Class: 'odmr_logic.ODMRLogic'
            connect:
                odmrcounter: 'odmrcounter'
                fitlogic: 'fit'
                microwave1: 'microwavesource'
                savelogic: 'save'
                taskrunner: 'tasklogic'
            scanmode: 'SWEEP'


    pulsedmeasurementlogic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        connect:
            fastcounter: 'fastcounterwaterloo' #'mydummyfastcounter'
            #fastcounter: 'picoharpfast'
            #fastcounter: 'mydummyfastcounter'
            #pulsegenerator: 'mydummypulser'
            #microwave: 'microwave_dummy'
            pulsegenerator: 'spincore'
            fitlogic: 'fit'
            savelogic: 'save'
            microwave: 'microwavesource'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #overhead_bytes: 4294967296  Not properly implemented yet
        #additional_methods_dir: 'C:\\Custom_dir\\Methods' optional
        connect:
            pulsegenerator: 'spincore'

    switchlogic:
        module.Class: 'switch_logic.SwitchLogic'
        connect:
            switch1: 'spincore'

    steppermon:
        module.Class: 'stepper_monitor.StepperLogic'
        connect:
            motor: 'coarse_motor'
            savelogic: 'save'


gui:
    tray:
        module.Class: 'trayicon.TrayIcon'
    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal_track.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scanner'
            savelogic: 'save'
            g2logic: 'g2logic'
            tracklogic: 'tracking'
            saturationlogic: 'saturationlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    dummymotor-confocal:
        module.Class: 'confocal_track.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scanner2'
            savelogic: 'save'
            g2logic: 'g2logic'
            tracklogic: 'tracking'
            saturationlogic: 'saturationlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02

    stepper-monitor:
        module.Class: 'stepper_monitor.steppermonitorgui.StepperGui'
        connect:
          stepperlogic: 'steppermon'
          savelogic: 'save'
        slider_stepsize: 0.001  # in micrometer


 #   poimanager:
  #      module.Class: 'poimanager.poimangui.PoiManagerGui'
  #      connect:
   #         poimanagerlogic1: 'poimanagerlogic'
   #         confocallogic1: 'scanner'


    automation:
        module.Class: 'automation.automationgui.AutomationGui'
        connect:
            automationlogic: 'automationlogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    z-scan:
        module.Class: 'zdatagui.simplezdatagui.SimpleDataGui'
        connect:
            simplelogic: simplelogic

    x-scan:
        module.Class: 'zdatagui.simplexdatagui.SimpleDataGui'
        connect:
            simplelogic: xsimplelogic

    y-scan:
        module.Class: 'zdatagui.simpleydatagui.SimpleDataGui'
        connect:
            simplelogic: ysimplelogic

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'save'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsedmasterlogic'

    switches:
        module.Class: 'switcher.switchgui.SwitchGui'
        connect:
            switchlogic: 'switchlogic'
